{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","lat","setLat","long","setLong","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","fetchData","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAmCeA,MAhCf,WACE,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAyBF,mBAAS,IAAlC,mBAAQG,EAAR,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAaK,GAAb,WAuBA,OArBAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAASC,GAChDT,EAAOS,EAASC,OAAOC,UACvBT,EAAQO,EAASC,OAAOE,cAHV,SAMVC,MAAM,GAAD,OAAIC,0CAAJ,yBAAkDf,EAAlD,gBAA6DE,EAA7D,+BAAwFa,qCAClGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJf,EAAQe,GACRC,QAAQC,IAAIF,MAVE,2CAAH,qDAafG,KACC,CAACtB,EAAIE,IAON,qBAAKqB,UAAU,SClBJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6f64ec60.chunk.js","sourcesContent":["import './App.css';\nimport React, {useEffect, useState } from \"react\";\n\nfunction App() {\n  const [lat, setLat] = useState([]);\n  const [ long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      navigator.geolocation.getCurrentPosition(function(position){\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}$units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        console.log(result);\n      });\n    }\n    fetchData();\n  }, [lat,long])\n\n\n\n\n\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}