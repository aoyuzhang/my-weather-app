{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weatherData","className","name","moment","format","weather","main","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","fetchData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA4CeA,EAlCC,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OACd,sBAAKC,UAAY,OAAjB,UACA,mBAAGA,UAAU,SAAb,SAAuBD,EAAYE,OACnC,sBAAKD,UAAU,OAAf,UACE,oBAAGA,UAAU,MAAb,UAAoBE,MAASC,OAAO,QAApC,KAA8C,+BAAOD,MAASC,OAAO,WACrE,mBAAGH,UAAU,cAAb,SAA4BD,EAAYK,QAAQ,GAAGC,UAGrD,sBAAKL,UAAU,OAAf,UACE,oBAAGA,UAAU,OAAb,yBAAiCD,EAAYM,KAAKC,KAAlD,YACA,oBAAGN,UAAU,OAAb,uBAA+BD,EAAYM,KAAKE,SAAhD,WAGF,sBAAKP,UAAU,OAAf,UACE,oBAAGA,UAAU,iBAAb,sBAAwC,IAAIQ,KAA+B,IAA1BT,EAAYU,IAAIC,SAAgBC,mBAAmB,YACpG,oBAAGX,UAAU,iBAAb,qBAAuC,IAAIQ,KAA8B,IAAzBT,EAAYU,IAAIG,QAAeD,mBAAmB,mBCiBvFE,MArCf,WACE,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAyBF,mBAAS,IAAlC,mBAAQG,EAAR,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAsBA,OApBAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAASC,GAChDV,EAAOU,EAASC,OAAOC,UACvBV,EAAQQ,EAASC,OAAOE,cAHV,SAMVC,MAAM,GAAD,OAAIC,0CAAJ,yBAAkDhB,EAAlD,gBAA6DE,EAA7D,+BAAwFc,qCAClGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJf,EAAQe,GACRC,QAAQC,IAAIF,MAVE,2CAAH,qDAafG,GACAF,QAAQC,IAAItB,GACZqB,QAAQC,IAAIpB,KACX,CAACF,EAAIE,IAIN,qBAAKjB,UAAU,MAAf,SACwB,oBAAbmB,EAAKd,KACZ,cAAC,EAAD,CAASN,YAAaoB,IAEtB,2BCvBOoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.83ca670a.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport '../App.css';\n// import{ Card } from 'semantic-ui-react'\nimport{ Button } from 'semantic-ui-react'\n\nconst refresh = () => {\n  window.location.reload();\n}\n\nconst Weather = ({weatherData}) => (\n  <div className = \"main\">\n  <p className=\"header\">{weatherData.name}</p>\n  <div className=\"flex\">\n    <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\n    <p className=\"description\">{weatherData.weather[0].main}</p>\n  </div>\n\n  <div className=\"flex\">\n    <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\n    <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\n  </div>\n\n  <div className=\"flex\">\n    <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\n    <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n  </div>\n  </div>\n\n\n  // <Card>\n  //   <Card.Content>\n  //     <Card.Header className = \"header\">{weatherData.name} </Card.Header>\n  //     <p>Temprature: {weatherData.main.temp} &deg;C </p>\n  //     <p>Sunrise: {new Date(weatherData.sys.sunrise *1000).toLocaleTimeString('en-IN')} </p>\n  //     <p>Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\n  //     <p>Description: {weatherData.weather[0].main}</p>\n  //     <p>Humidity: {weatherData.main.humidity} %</p>\n  //     <p>Day: {moment().format('dddd')}</p>\n  //     <p>Date: {moment().format('LL')}</p>\n  //   </Card.Content>\n  // </Card>\n)\n\nexport default Weather;\n","import './App.css';\nimport React, {useEffect, useState } from \"react\";\nimport Weather from './components/Weather';\n\n\nfunction App() {\n  const [lat, setLat] = useState([]);\n  const [ long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      navigator.geolocation.getCurrentPosition(function(position){\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        console.log(result);\n      });\n    }\n    fetchData();\n    console.log(lat);\n    console.log(long);\n  }, [lat,long])\n\n\n  return (\n    <div className=\"App\">\n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div></div>\n      )}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}